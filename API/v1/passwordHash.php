<?php namespace el_api_v1;

class passwordHash {

    
    /*
     * Blowfish hashing with a salt as follows: "$2a$", "$2x$" or "$2y$", a two digit cost parameter, "$", and 22 characters from the alphabet "./0-9A-Za-z". 
     * Using characters outside of this range in the salt will cause crypt() to return a zero-length string. 
     */
    // blowfish initial parameter
    private static $algoritmo = '$2a';
    // cost parameter
    private static $cost = '$10';
    // hash of  user's password
    private $hash;
    // seed for stronger hash
    private $salt;
    // mainly for internal use
    /* Calculate the SHA-1 hash of a random string generated by mt_rand() with Mersenne's Twister algorithm
     *  then cut the string at first 22 characters.
     * @return salt for stronger hashing functions
     */
    public static function unique_salt() {
        return substr(sha1(mt_rand()), 0, 22);
    }

    
    /* this will be used to generate a hash using blowfish algorithm
     * @return hash of user's password
     */
    public static function hash($password) {
         
        return crypt($password, self::$algoritmo .
                self::$cost .
                '$' . self::unique_salt());
    }

    // this will be used to compare a password against a hash
    public static function check_password($hash, $password) {
        $full_salt = substr($hash, 0, 29);
        $new_hash = crypt($password, $full_salt);
        return ($hash == $new_hash);
    }

}

?>
